module thirty_two_div(
    input [31:0] dividend,
    input [31:0] divisor,
    output reg [31:0] quotient,
    output reg [31:0] remainder
    );

	reg	[63:0]r;
	reg	[31:0]d;
	reg	sign;
	integer i;
	
	always @(*)
		begin
		//Initialization
		sign = (dividend[31] == 1'b1 ^ divisor[31] == 1'b1) ? 1:0;
		if (dividend[31] == 1'b1)
			begin
			r[63:32] = 32'b0;
			r[31:0] =  ~dividend+1;
			end
		else
			begin
			r[63:32] = 32'b0;
			r[31:0] =  dividend;
			end
		if (divisor[31] == 1'b1)
			begin
			d = ~divisor+1;
			end
		else
			begin
			d  = divisor;
			end
		r = r << 1;
		
		for (i=0;i<32;i=i+1)
			begin
			r[63:32] = r[63:32] - d;
			if (r[63] == 1)
				begin
				r[63:32] = r[63:32] + d;
				r = r << 1;
				end
			else
				begin
				r = r << 1;
				r[0] = 1;
				end
			end
	
		remainder = r[63:32] >> 1;
		
		if (sign == 1)
			begin
			quotient = ~r[31:0]+1;
			end
		else
			begin
			quotient = r[31:0];
			end
		end
endmodule

